CREATE TABLE Subscription(
	id INT NOT NULL PRIMARY KEY,
	duration INT NOT NULL,
	discount INT NOT NULL DEFAULT 0,
	price INT NOT NULL
);

CREATE TABLE Person(
	id INT NOT NULL PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	username VARCHAR(50) NOT NULL,
	password CHAR(64) NOT NULL,
	email VARCHAR(50) NOT NULL,
	age INT,
	gender CHAR(1) NOT NULL
);

CREATE TABLE Orders(
	id INT NOT NULL,
	order_number CHAR(16) NOT NULL,
	date DATETIME NOT NULL DEFAULT GETDATE(),
	price INT NOT NULL,
	subscriptionId INT NOT NULL,
	personId INT NOT NULL,
	PRIMARY KEY (id, order_number),
	FOREIGN KEY (subscriptionId) REFERENCES Subscription(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (personId) REFERENCES Person(id) ON UPDATE CASCADE ON DELETE CASCADE,
);

CREATE TABLE Device(
	id INT NOT NULL PRIMARY KEY,
	ISP VARCHAR(50) NOT NULL,
	ip VARCHAR(16) NOT NULL,
	type INT NOT NULL,
	personId INT NOT NULL,
	FOREIGN KEY (personId) REFERENCES Person(id) ON UPDATE CASCADE ON DELETE CASCADE,
);

CREATE TABLE Phone(
	phone_number VARCHAR(20) NOT NULL,
	personId INT NOT NULL,
	PRIMARY KEY (phone_number, personId),
	FOREIGN KEY (personId) REFERENCES Person(id) ON UPDATE CASCADE ON DELETE CASCADE,
);

CREATE TABLE Actor(
	biography VARCHAR(8000),
	personId INT PRIMARY KEY NOT NULL,
	FOREIGN KEY (personId) REFERENCES Person(id) ON UPDATE CASCADE ON DELETE CASCADE,
);

CREATE TABLE Producer(
	biography VARCHAR(8000),
	personId INT NOT NULL,
	FOREIGN KEY (personId) REFERENCES Person(id) ON UPDATE CASCADE ON DELETE CASCADE,
);

CREATE TABLE Director(
	biography VARCHAR(8000),
	personId INT NOT NULL,
	FOREIGN KEY (personId) REFERENCES Person(id) ON UPDATE CASCADE ON DELETE CASCADE,
);

CREATE TABLE Admin(
	personId INT NOT NULL PRIMARY KEY,
	FOREIGN KEY (personId) REFERENCES Person(id) ON UPDATE CASCADE ON DELETE CASCADE,
);

CREATE TABLE Agent(
	biography VARCHAR(8000),
	personId INT NOT NULL PRIMARY KEY,
	FOREIGN KEY (personId) REFERENCES Person(id) ON UPDATE CASCADE ON DELETE CASCADE,
);

CREATE TABLE Users(
	remaining_subscription_time INT NOT NULL DEFAULT 0,
	personId INT NOT NULL,
	FOREIGN KEY (personId) REFERENCES Person(id) ON UPDATE CASCADE ON DELETE CASCADE,
);

CREATE TABLE FAQ(
	id INT NOT NULL PRIMARY KEY,
	question VARCHAR(8000) NOT NULL,
	answer VARCHAR(8000) NOT NULL,
	adminId INT NOT NULL,
	FOREIGN KEY (adminId) REFERENCES Admin(personId) ON UPDATE CASCADE ON DELETE CASCADE,
);

CREATE TABLE Product(
	id INT NOT NULL PRIMARY KEY,
	poster IMAGE,
	country VARCHAR(50) NOT NULL,
	name VARCHAR(50) NOT NULL,
	language VARCHAR(50) NOT NULL,
	is_free CHAR(1) NOT NULL,
	likes_number INT NOT NULL DEFAULT 0,
	dislikes_number INT NOT NULL DEFAULT 0,
	IMDB_rating INT,
	producerId INT NOT NULL,
	directorId INT NOT NULL,
	age_constraint CHAR(1) NOT NULL,
	description VARCHAR(8000),
	year INT NOT NULL,
);

CREATE TABLE Play(
	actorId INT NOT NULL,
	productId INT NOT NULL,
	PRIMARY KEY (actorId, productId),
	FOREIGN KEY (actorId) REFERENCES Actor(personId) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (productId) REFERENCES Product(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE Work(
	agentId INT NOT NULL,
	productId INT NOT NULL,
	role VARCHAR(50),
	PRIMARY KEY (agentId, productId),
	FOREIGN KEY (agentId) REFERENCES Agent(personId) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (productId) REFERENCES Product(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE Comment(
	id INT NOT NULL PRIMARY KEY,
	text VARCHAR(8000) NOT NULL,
	date DATETIME DEFAULT GETDATE(),
	likes_number INT DEFAULT 0,
	dislikes_number INT DEFAULT 0,
	personId INT NOT NULL,
	productId INT NOT NULL,
	FOREIGN KEY (personId) REFERENCES Person(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (productId) REFERENCES Product(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE Likes(
	userId INT NOT NULL,
	productId INT NOT NULL,
	PRIMARY KEY (userId, productId),
	FOREIGN KEY (userId) REFERENCES Person(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (productId) REFERENCES Product(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE Genre(
	genre_title VARCHAR(50) NOT NULL,
	productId INT NOT NULL,
	PRIMARY KEY (genre_title, productId),
	FOREIGN KEY (productId) REFERENCES Product(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE Category(
	id INT NOT NULL PRIMARY KEY,
	title VARCHAR(50),
);

CREATE TABLE CategoryProduct(
	categoryId INT NOT NULL,
	productId INT NOT NULL,
	PRIMARY KEY (categoryId, productId),
	FOREIGN KEY (categoryId) REFERENCES Category(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (productId) REFERENCES Product(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE Serial(
	episodes_number INT,
	productId INT PRIMARY KEY,
	FOREIGN KEY (productId) REFERENCES Product(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE Movie(
	length INT NOT NULL,
	productId INT PRIMARY KEY,
	serialId INT,
	FOREIGN KEY (productId) REFERENCES Product(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (serialId) REFERENCES Serial(productId)
);

CREATE TABLE Content(
	id INT NOT NULL PRIMARY KEY,
	path VARCHAR(1000) NOT NULL,
	quality INT NOT NULL,
	size INT NOT NULL,
	movieId INT NOT NULL,
	FOREIGN KEY (movieId) REFERENCES Movie(productId) ON UPDATE CASCADE ON DELETE CASCADE,
);

CREATE TABLE Subtitle(
	id INT NOT NULL PRIMARY KEY,
	path VARCHAR(1000) NOT NULL,
	language VARCHAR(50) NOT NULL,
	movieId INT NOT NULL,
	FOREIGN KEY (movieId) REFERENCES Movie(productId) ON UPDATE CASCADE ON DELETE CASCADE,
);